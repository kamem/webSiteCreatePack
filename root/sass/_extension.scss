@charset "utf-8";


//----------------------------------------------------------------------
// sprite-retina
//----------------------------------------------------------------------
@mixin r-sprite-width($sprite) {
	width: nth($sprite, 5)/2;
}

@mixin r-sprite-height($sprite) {
	height: nth($sprite, 6)/2;
}

@mixin r-sprite-position($sprite) {
	$sprite-offset-x: nth($sprite, 3)/2;
	$sprite-offset-y: nth($sprite, 4)/2;
	background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin r-sprite-size($sprite) {
	background-size: nth($sprite, 7)/2 nth($sprite, 8)/2;
}

@mixin r-sprite($sprite) {
	@include sprite-image($sprite);
	@include r-sprite-position($sprite);
	@include r-sprite-width($sprite);
	@include r-sprite-height($sprite);
	@include r-sprite-size($sprite);
}

//----------------------------------------------------------------------
// img
//----------------------------------------------------------------------
//	background-fit
//	画像のサイズを取得しbackground-size,width,heightをセットする
//	$widthFixedがfalseの場合はwidth,heightを出力しない
//	$imgには配列で複数画像を指定することが可能（その場合は$valueにpositionとrepeat必須）
//	※グラデーションも指定できます。
//
//	$img: config.rb images_dirで指定したパスからの画像（複数画像を指定できます。）
//	$widthFixed: 画像をタグのサイズいっぱいに指定してテキストを消したいとき true
//	$value: 一つ目の画像をどういう配置にするか（複数指定してある場合は ("0 0 no-repeat","left top repeat")）
// $base64: $imgで指定した画像をbase64にするかしないか
//	$retina: true or false
$imgWidth: ();
$imgHeight: ();
@mixin background-fit($img, $widthFixed: true, $value: '0 0 no-repeat', $important: '', $base64: $isBase64, $retina: $isRetina) {
	$retinaSuport: if($retina, 2, 1);
	$imgList : ();
	$widthHeightList : ();
	$width : ();
	$height : ();
	$imgWidth: ();
	$imgHeight: ();
	$num: 0;

	@each $i in $img {
		$isFile: isFile($images_dir + $i) == 'true';
		$num: $num + 1;

		$width: '';
		$height: '';
		$image: '';

		@if $isFile {
			$width: round(image-width($i) / $retinaSuport);
			$height: round(image-height($i) / $retinaSuport);
			@if($base64) {
				$image: inline-image($i);
			} @else {
				$image: image-url($i);
			}
		} @else {
			$width: auto;
			$height: auto;
			$image: $i;
		}

		$val: if(length($img) == $num and $important != '',append(unquote(nth($value,$num)),$important),unquote(nth($value,$num)));
		$whval: if(length($img) == $num and $important != '',append(join($width,$height),$important),join($width,$height));

		$imgList: append($imgList, join($image,$val),comma);
		$widthHeightList: append($widthHeightList, $whval,comma);

		$imgWidth: if(length($img) == 1,$width,append($imgWidth, $width));
		$imgHeight:  if(length($img) == 1,$height,append($imgHeight, $height));

		$imgWidth: $imgWidth !global;
		$imgHeight:  $imgHeight !global;
	}

	background: $imgList;
	@if $widthFixed and length($img) < 2 {
		text-indent: -9999px;
		overflow: hidden;
		width: if($important == '', $width,  unquote($width + ' ' + $important));
		height: if($important == '', $height, unquote($height + ' ' + $important));
	}
	background-size: $widthHeightList;
}

//	image-info
//	画像の幅をとってきてくれるisRetinaがtrueの場合は2で割った数を返す
//
//	$img: config.rb images_dirで指定したパスからの画像（複数画像を指定できます。）
//	$name: width or height
//	$retina: true or false
@function image-info($img, $name, $retina: $isRetina) {
	$retinaSuport: if($retina, 2, 1);
	$width : ();
	$height : ();
	$imgWidth: ();
	$imgHeight: ();
	@each $i in $img {
		$width: image-width($i) / $retinaSuport;
		$height: image-height($i) / $retinaSuport;

		$imgWidth: append($imgWidth, $width) !global;
		$imgHeight:  append($imgHeight, $height) !global;
	}

	@return if($name == 'width',$imgWidth,$imgHeight)
}


//	half-image-width
//	画像の半分の横幅の値を返す（複数画像を配列で指定可能）
//
//	$img: config.rb images_dirで指定した画像（複数画像を指定できます。）
@function half-image-width($img) {
	$imgWidth: ();
	@each $i in $img {
		$width: round(image-width($i) / 2);

		$imgWidth: if(length($img) == 1,$width,append($imgWidth, $width)) !global;
	}

	@return $imgWidth
}

//	half-image-height
//	画像の半分の縦幅の値を返す（複数画像を配列で指定可能）
//
//	$img: config.rb images_dirで指定したパスからの画像（複数画像を指定できます。）
@function half-image-height($img) {
	$imgHeight: ();
	@each $i in $img {
		$height: round(image-height($i) / 2);

		$imgHeight:  if(length($img) == 1,$height,append($imgHeight, $height));
	}

	@return $imgHeight
}

//----------------------------------------------------------------------
// css3
//----------------------------------------------------------------------
//	min_height
//	最大の高さ IE6にも対応させたい場合
@mixin min-height($value: 1%) {
	min-height: $value;
	@if support-legacy-browser("ie", "6") {
	_height: $value;
	}
}

//	inline-block
//	IE6,IE7用 にinline-blockを実装する場合
@mixin inline-block {
	display: inline-block;
	@if support-legacy-browser("ie", "6") {
		*display: inline;
		*zoom: 1;
	}
}

//	text-shadow-repeat
//	同じテキストシャドウを繰り返したい場合
//
// $value: text-shadowの値
// $num: 繰り返したい数
@mixin text-shadow-repeat($value: 0 0 1px rgba(0,0,0,0.3), $num : 1) {
	$text-shadowList : $value;
	@for $i from 1 through $num - 1 {
		$text-shadowList : unquote($text-shadowList + "," + $value);
	}
	text-shadow: $text-shadowList;
}

//	box-shadow-repeat
//	同じボックスシャドウを繰り返したい場合
//
// $value: box-shadowの値
// $num: 繰り返したい数
@mixin box-shadow-repeat($value: 0 0 1px rgba(0,0,0,0.3), $num : 1) {
	$box-shadowList : $value;
	@for $i from 1 through $num - 1 {
		$box-shadowList : unquote($box-shadowList + "," + $value);
	}
	box-shadow: $box-shadowList;
}

//	triangle-set
//	作った三角形を$dirに合わせてボックスの外側にセットする
//
// $num: 大きさ（10px 20px のように2つ値を書くことで横と高さを指定することができます。）
// $color: 色
// $dir: 向き（top,right,bottom,left）
// $position: 三角形をボックスのどの位置にセットするか（真ん中の場合50%）
// $selecter: after or before どちらを使うか
$size: '';
@mixin triangle-set($num: 10px, $color: black, $dir: top, $position: 50%, $selecter: after) {
	$size: (nth($num,1) / 2) !global;
	$h: '';
	@if length($num) == 1 {
		$h: $num;
	} @else {
		$h: nth($num,2);
	}
	$direction: if($dir == top,bottom,if($dir == bottom,top,if($dir == left,right,if($dir == right,left,''))));
	&#{':' + $selecter} {
		@include triangle($num,$color,$dir);
		#{$dir}: -($size + $h);
		position: absolute;
		@if($position != false) {
			#{if($dir == left or $dir == right,top,left)}: $position;
			@if($position == 50%) {
				margin-#{if($dir == left or $dir == right,top,left)}: -$size;
			}
		}
	}
}

//	triangle
//	三角形を作る
//
// $num: 大きさ（10px 20px のように2つ値を書くことで横と高さを指定することができます。）
// $color: 色
// $dir: 向き（top,right,bottom,left）
@mixin triangle($num: 10px, $color: black, $dir: top) {
	$size: (nth($num,1) / 2) !global;
	$h: '';
	@if length($num) == 1 {
		$h: $num;
	} @else {
		$h: nth($num,2);
	}
	$direction: if($dir == top,bottom,if($dir == bottom,top,if($dir == left,right,if($dir == right,left,''))));
	content: "";
	font-size: 0;
	border: $size solid transparent;
	border-#{$direction}-color: $color;
	border-#{$direction}-width: $h;
}


//	arrow-set
//	作った矢印を$dirに合わせてボックスのセンターにセットする
//
// $num: 大きさ
// $bold: 太さ
// $color: 色
// $dir: 向き（top,right,bottom,left）
// $position: 矢印をボックスのどの位置にセットするか（真ん中の場合50%）
// $selecter: after or before どちらを使うか
@mixin arrow-set($num: 10px, $bold: 1px, $color: white, $dir: right, $position: 50%, $selecter: after) {
	&#{':' + $selecter} {
		@include arrow($num,$bold,$color,$dir);
		position: absolute;
		#{if($dir == left or $dir == right,top,left)}: $position;
		margin-#{if($dir == left or $dir == right,top,left)}: round(-$size / 2);
	}
}

//	arrow
//	矢印を作る
//
// $num: 大きさ
// $bold: 太さ
// $color: 色
// $dir: 向き（top,right,bottom,left）
@mixin arrow($num: 10px, $bold: 1px, $color: white, $dir: right) {
	$size: $num !global;
	$ary: if($dir == top, (top right),if($dir == right, (right bottom),if($dir == bottom, (bottom left),if($dir == left, (top left),''))));
	content: '';
	display: block;
	width: $size;
	height: $size;
	@each $name in $ary {
		border-#{$name}: $bold solid $color;
	}
	box-sizing: border-box;
	transform: rotate(-45deg);
}

//	background-4corners
//	4つ角に同じ画像を回転・反転させておきたい場合
//
//	$img: config.rb images_dirで指定したパスからの画像
// $retina: 画像のサイズを半分にするかどうか
@mixin background-4corners($img, $retina: $isRetina) {
	$retinaSuport: if($retina, 2, 1);
	$width: round(image-width($img) / $retinaSuport);
	$height: round(image-height($img) / $retinaSuport);
	&:after,
	&:before {
		content: '';
		display: block;
		background: image-url($img) 0 0 no-repeat;
		background-size: $width $height;
		width: 50%;
		height: $height;
		position: absolute;
		-webkit-box-reflect: right;
	}

	&:before {
		top: 0;
		left: 0;
	}

	&:after {
    right: 0;
    bottom: 0;
		transform: rotate(-180deg);
	}
}

//	background-stripe
//
//	$size: stripeの背景サイズ
//	$color: stripeの背景色
//	$deg: 角度 45度単位でのみ可能
@mixin background-stripe($size1: 10, $color1: transparent, $size2: 10, $color2: #000, $deg: 45deg, $important: '') {
	$imageWidth: ($size1 + $size2) * 2;
	$color1Percent: $size1 / $imageWidth * 100%;
	$color2Percent: $size2 / $imageWidth * 100%;

	$background-image-value: linear-gradient(
			if($deg != '',$deg,left),
			$color1 $color1Percent,
			$color2 $color1Percent, $color2 $color1Percent + $color2Percent,
			$color1 $color1Percent + $color2Percent, $color1 $color1Percent * 2 + $color2Percent,
			$color2 $color1Percent * 2 + $color2Percent, $color2
	);
	background-image: if($important == '', $background-image-value,  append($background-image-value, unquote($important)));

	$background-size-value: $imageWidth * 1px $imageWidth * 1px;
	background-size: if($important == '', $background-size-value,  append($background-size-value, unquote($important)));
}

//----------------------------------------------------------------------
// size
//----------------------------------------------------------------------
// es
// 基準となるサイズに対する値をさまざまな単位にエンコード（encode size）
//
// $size: 変換したいサイズ
// $unit: 変換したい単位（%, em, rem, px）
// $context: 変換の基準となる値
@function es($size, $unit: $font-unit, $context: $font-sizeDefault){
	@if $unit == '%' {
		@return #{$size / $context * 100}#{$unit};
	} @else if $unit == px {
		@return $size * 1px;
	} @else if $unit == 'em' {
		@return $size / $context * 1em;
	} @else {
		@return $size / $context * 1rem;
	}
}

// em-width
//em指定のwidthを計算する。
//
// $em: emの値
// $letter-spacing: letter-spacingの値
// $$size: font-sizeの値
@mixin em-width($em, $letter-spacing: 0, $size: 16) {
	max-width: fs($em * ($size + $letter-spacing));
	@if support-legacy-browser("ie", "7") {
		#{"/"}width: $em#{'em'};
	}
};

//----------------------------------------------------------------------
// ratio 黄金比 白銀比の計算
//----------------------------------------------------------------------

//	golden-ratio
//	黄金比の計算
//	$num: 基準にしたい値
//	$big: $numに対しての大きい方の黄金比を計算したい場合はtrue
//	@return {Number}
@function golden-ratio($num: 0,$big: false) {
	@return if($big, round($num / 1.618), round($num * 1.618));
}

//	silver-ratio
//	白銀比の計算
//	$num: 基準にしたい値
//	$big: $numに対しての大きい方の白銀比を計算したい場合はtrue
//	@return {Number}
@function silver-ratio($num: 0,$big: false) {
	@return if($big, round($num / 1.414), round($num * 1.414));
}

//----------------------------------------------------------------------
// clearfix
//----------------------------------------------------------------------
//	clearfix
// $selecters: 配列でクリアーフォックスさせたいセレクターを渡すとクリアーフィックにしてくれる。
@mixin clearfix($selecters: '.clearfix') {
	%clearfix {
		@if support-legacy-browser("ie", "7") {
		min-height: 1px;
		}
		@if support-legacy-browser("ie", "6") {
		_height: 1%;
		}
		&:after {
			content: ".";
			display: block;
			clear: both;
			height: 0;
			visibility: hidden;
		}
	}

	@each $selecter in $selecters {
		#{$selecter} {
			@extend %clearfix;
		}
	}
}